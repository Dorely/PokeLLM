{
  "metadata": {
    "id": "pokemon-adventure",
    "name": "Pokemon Adventure RPG",
    "version": "1.0.0",
    "description": "D&D-style Pokemon adventure ruleset with trainer progression, multi-combatant battles, and energy-based combat",
    "authors": ["PokeLLM Team"],
    "tags": ["pokemon", "adventure", "rpg", "trainer", "battle"]
  },
  "gameStateSchema": {
    "requiredCollections": [
      "trainers",
      "wildPokemon",
      "capturedPokemon",
      "locations",
      "items",
      "battleStates",
      "gymBadges",
      "questProgress"
    ],
    "playerFields": [
      "trainerClass",
      "level",
      "experience",
      "stats",
      "energy",
      "abilities",
      "inventory",
      "activePokemon",
      "pokemonTeam",
      "gymBadges",
      "knownMoves"
    ],
    "dynamicCollections": {
      "wildPokemon": "Pokemon",
      "capturedPokemon": "Pokemon",
      "trainers": "Trainer",
      "battleStates": "Battle",
      "locations": "Location"
    }
  },
  "trainerClasses": [
    {
      "id": "ace_trainer",
      "name": "Ace Trainer",
      "description": "Well-rounded trainer with balanced combat and exploration skills",
      "baseStats": {
        "strength": 12,
        "dexterity": 12,
        "constitution": 14,
        "intelligence": 12,
        "wisdom": 13,
        "charisma": 12
      },
      "startingAbilities": ["Leadership", "Pokemon Bond"],
      "levelProgression": {
        "statGrowth": {
          "strength": 2,
          "dexterity": 2,
          "constitution": 3,
          "intelligence": 2,
          "wisdom": 3,
          "charisma": 2
        },
        "abilityUnlocks": {
          "5": "Battle Strategy",
          "10": "Team Coordination",
          "15": "Master Trainer",
          "20": "Champion's Spirit"
        }
      },
      "startingItems": ["5 Pokeball", "3 Potion", "Trainer License", "Pokedex"],
      "startingPokemon": 1
    },
    {
      "id": "pokemon_researcher",
      "name": "Pokemon Researcher",
      "description": "Scholar focused on Pokemon biology, behavior, and type effectiveness",
      "baseStats": {
        "strength": 10,
        "dexterity": 11,
        "constitution": 12,
        "intelligence": 16,
        "wisdom": 14,
        "charisma": 11
      },
      "startingAbilities": ["Type Analysis", "Pokemon Knowledge"],
      "levelProgression": {
        "statGrowth": {
          "strength": 1,
          "dexterity": 2,
          "constitution": 2,
          "intelligence": 4,
          "wisdom": 3,
          "charisma": 2
        },
        "abilityUnlocks": {
          "5": "Advanced Analysis",
          "10": "Weakness Exploitation",
          "15": "Type Mastery",
          "20": "Professor's Insight"
        }
      },
      "startingItems": ["3 Pokeball", "Research Notes", "Advanced Pokedex", "Type Chart"],
      "startingPokemon": 1
    },
    {
      "id": "pokemon_ranger",
      "name": "Pokemon Ranger",
      "description": "Nature-focused trainer skilled in exploration and Pokemon communication",
      "baseStats": {
        "strength": 13,
        "dexterity": 15,
        "constitution": 14,
        "intelligence": 11,
        "wisdom": 15,
        "charisma": 10
      },
      "startingAbilities": ["Nature Walk", "Pokemon Empathy"],
      "levelProgression": {
        "statGrowth": {
          "strength": 2,
          "dexterity": 3,
          "constitution": 3,
          "intelligence": 2,
          "wisdom": 3,
          "charisma": 1
        },
        "abilityUnlocks": {
          "5": "Wild Bond",
          "10": "Terrain Mastery",
          "15": "Alpha Connection",
          "20": "Guardian of Nature"
        }
      },
      "startingItems": ["4 Pokeball", "Survival Kit", "Map", "Ranger Badge"],
      "startingPokemon": 1
    },
    {
      "id": "pokemon_coordinator",
      "name": "Pokemon Coordinator",
      "description": "Performance-focused trainer skilled in contests and Pokemon presentation",
      "baseStats": {
        "strength": 10,
        "dexterity": 14,
        "constitution": 12,
        "intelligence": 13,
        "wisdom": 12,
        "charisma": 16
      },
      "startingAbilities": ["Style Sense", "Performance Art"],
      "levelProgression": {
        "statGrowth": {
          "strength": 1,
          "dexterity": 3,
          "constitution": 2,
          "intelligence": 2,
          "wisdom": 2,
          "charisma": 4
        },
        "abilityUnlocks": {
          "5": "Contest Combo",
          "10": "Crowd Pleaser",
          "15": "Grand Festival Master",
          "20": "Top Coordinator"
        }
      },
      "startingItems": ["3 Pokeball", "Poke Blocks", "Contest Ribbon", "Fashion Case"],
      "startingPokemon": 1
    },
    {
      "id": "pokemon_breeder",
      "name": "Pokemon Breeder",
      "description": "Specialist in Pokemon care, breeding, and nurturing strong bonds",
      "baseStats": {
        "strength": 11,
        "dexterity": 12,
        "constitution": 15,
        "intelligence": 14,
        "wisdom": 16,
        "charisma": 13
      },
      "startingAbilities": ["Pokemon Care", "Egg Knowledge"],
      "levelProgression": {
        "statGrowth": {
          "strength": 2,
          "dexterity": 2,
          "constitution": 3,
          "intelligence": 3,
          "wisdom": 4,
          "charisma": 2
        },
        "abilityUnlocks": {
          "5": "Breeding Expertise",
          "10": "Daycare Master",
          "15": "Perfect IV Training",
          "20": "Legendary Breeder"
        }
      },
      "startingItems": ["5 Pokeball", "Pokemon Food", "Incubator", "Breeding Guide"],
      "startingPokemon": 1
    },
    {
      "id": "gym_challenger",
      "name": "Gym Challenger", 
      "description": "Competitive trainer focused on battling and winning Gym badges",
      "baseStats": {
        "strength": 14,
        "dexterity": 13,
        "constitution": 13,
        "intelligence": 12,
        "wisdom": 11,
        "charisma": 14
      },
      "startingAbilities": ["Battle Focus", "Gym Strategy"],
      "levelProgression": {
        "statGrowth": {
          "strength": 3,
          "dexterity": 2,
          "constitution": 2,
          "intelligence": 2,
          "wisdom": 2,
          "charisma": 3
        },
        "abilityUnlocks": {
          "5": "Type Advantage",
          "10": "Badge Power",
          "15": "Elite Four Preparation",
          "20": "Champion Potential"
        }
      },
      "startingItems": ["6 Pokeball", "Super Potion", "Gym Guide", "Battle Strategy Book"],
      "startingPokemon": 1
    }
  ],
  "pokemonTypes": [
    "Normal", "Fire", "Water", "Electric", "Grass", "Ice",
    "Fighting", "Poison", "Ground", "Flying", "Psychic", "Bug",
    "Rock", "Ghost", "Dragon", "Dark", "Steel", "Fairy"
  ],
  "typeChart": {
    "Normal": {
      "superEffective": [],
      "notVeryEffective": ["Rock", "Steel"],
      "noEffect": ["Ghost"]
    },
    "Fire": {
      "superEffective": ["Grass", "Ice", "Bug", "Steel"],
      "notVeryEffective": ["Fire", "Water", "Rock", "Dragon"],
      "noEffect": []
    },
    "Water": {
      "superEffective": ["Fire", "Ground", "Rock"],
      "notVeryEffective": ["Water", "Grass", "Dragon"],
      "noEffect": []
    },
    "Electric": {
      "superEffective": ["Water", "Flying"],
      "notVeryEffective": ["Electric", "Grass", "Dragon"],
      "noEffect": ["Ground"]
    },
    "Grass": {
      "superEffective": ["Water", "Ground", "Rock"],
      "notVeryEffective": ["Fire", "Grass", "Poison", "Flying", "Bug", "Dragon", "Steel"],
      "noEffect": []
    },
    "Ice": {
      "superEffective": ["Grass", "Ground", "Flying", "Dragon"],
      "notVeryEffective": ["Fire", "Water", "Ice", "Steel"],
      "noEffect": []
    },
    "Fighting": {
      "superEffective": ["Normal", "Ice", "Rock", "Dark", "Steel"],
      "notVeryEffective": ["Poison", "Flying", "Psychic", "Bug", "Fairy"],
      "noEffect": ["Ghost"]
    },
    "Poison": {
      "superEffective": ["Grass", "Fairy"],
      "notVeryEffective": ["Poison", "Ground", "Rock", "Ghost"],
      "noEffect": ["Steel"]
    },
    "Ground": {
      "superEffective": ["Fire", "Electric", "Poison", "Rock", "Steel"],
      "notVeryEffective": ["Grass", "Bug"],
      "noEffect": ["Flying"]
    },
    "Flying": {
      "superEffective": ["Electric", "Grass", "Fighting", "Bug"],
      "notVeryEffective": ["Electric", "Rock", "Steel"],
      "noEffect": []
    },
    "Psychic": {
      "superEffective": ["Fighting", "Poison"],
      "notVeryEffective": ["Psychic", "Steel"],
      "noEffect": ["Dark"]
    },
    "Bug": {
      "superEffective": ["Grass", "Psychic", "Dark"],
      "notVeryEffective": ["Fire", "Fighting", "Poison", "Flying", "Ghost", "Steel", "Fairy"],
      "noEffect": []
    },
    "Rock": {
      "superEffective": ["Fire", "Ice", "Flying", "Bug"],
      "notVeryEffective": ["Fighting", "Ground", "Steel"],
      "noEffect": []
    },
    "Ghost": {
      "superEffective": ["Psychic", "Ghost"],
      "notVeryEffective": ["Dark"],
      "noEffect": ["Normal"]
    },
    "Dragon": {
      "superEffective": ["Dragon"],
      "notVeryEffective": ["Steel"],
      "noEffect": ["Fairy"]
    },
    "Dark": {
      "superEffective": ["Psychic", "Ghost"],
      "notVeryEffective": ["Fighting", "Dark", "Fairy"],
      "noEffect": []
    },
    "Steel": {
      "superEffective": ["Ice", "Rock", "Fairy"],
      "notVeryEffective": ["Fire", "Water", "Electric", "Steel"],
      "noEffect": []
    },
    "Fairy": {
      "superEffective": ["Fighting", "Dragon", "Dark"],
      "notVeryEffective": ["Fire", "Poison", "Steel"],
      "noEffect": []
    }
  },
  "pokemonSpecies": [
    {
      "id": "pikachu",
      "name": "Pikachu",
      "type1": "Electric",
      "type2": null,
      "baseStats": {
        "hp": 35,
        "attack": 55,
        "defense": 40,
        "spAttack": 50,
        "spDefense": 50,
        "speed": 90
      },
      "baseEnergy": 80,
      "abilities": ["Static", "Lightning Rod"],
      "levelUpMoves": {
        "1": ["Thunder Shock", "Growl"],
        "5": ["Quick Attack"],
        "10": ["Double Team"],
        "15": ["Thunder Wave"],
        "20": ["Thunderbolt"],
        "25": ["Agility"],
        "30": ["Thunder"]
      },
      "evolution": {
        "method": "item",
        "requirement": "Thunder Stone",
        "result": "raichu"
      }
    },
    {
      "id": "raichu",
      "name": "Raichu",
      "type1": "Electric",
      "type2": null,
      "baseStats": {
        "hp": 60,
        "attack": 90,
        "defense": 55,
        "spAttack": 90,
        "spDefense": 80,
        "speed": 110
      },
      "baseEnergy": 100,
      "abilities": ["Static", "Lightning Rod"]
    },
    {
      "id": "charmander",
      "name": "Charmander",
      "type1": "Fire",
      "type2": null,
      "baseStats": {
        "hp": 39,
        "attack": 52,
        "defense": 43,
        "spAttack": 60,
        "spDefense": 50,
        "speed": 65
      },
      "baseEnergy": 70,
      "abilities": ["Blaze", "Solar Power"],
      "levelUpMoves": {
        "1": ["Scratch", "Growl"],
        "7": ["Ember"],
        "13": ["Dragon Rage"],
        "19": ["Scary Face"],
        "25": ["Fire Fang"],
        "31": ["Flame Burst"],
        "37": ["Flamethrower"]
      },
      "evolution": {
        "method": "level",
        "requirement": 16,
        "result": "charmeleon"
      }
    },
    {
      "id": "charmeleon",
      "name": "Charmeleon",
      "type1": "Fire",
      "type2": null,
      "baseStats": {
        "hp": 58,
        "attack": 64,
        "defense": 58,
        "spAttack": 80,
        "spDefense": 65,
        "speed": 80
      },
      "baseEnergy": 85,
      "abilities": ["Blaze", "Solar Power"],
      "evolution": {
        "method": "level",
        "requirement": 36,
        "result": "charizard"
      }
    },
    {
      "id": "charizard",
      "name": "Charizard",
      "type1": "Fire",
      "type2": "Flying",
      "baseStats": {
        "hp": 78,
        "attack": 84,
        "defense": 78,
        "spAttack": 109,
        "spDefense": 85,
        "speed": 100
      },
      "baseEnergy": 120,
      "abilities": ["Blaze", "Solar Power"]
    },
    {
      "id": "squirtle",
      "name": "Squirtle",
      "type1": "Water",
      "type2": null,
      "baseStats": {
        "hp": 44,
        "attack": 48,
        "defense": 65,
        "spAttack": 50,
        "spDefense": 64,
        "speed": 43
      },
      "baseEnergy": 75,
      "abilities": ["Torrent", "Rain Dish"],
      "levelUpMoves": {
        "1": ["Tackle", "Tail Whip"],
        "4": ["Water Gun"],
        "7": ["Withdraw"],
        "10": ["Rapid Spin"],
        "13": ["Bubble"],
        "16": ["Bite"],
        "19": ["Water Pulse"]
      },
      "evolution": {
        "method": "level",
        "requirement": 16,
        "result": "wartortle"
      }
    },
    {
      "id": "wartortle",
      "name": "Wartortle",
      "type1": "Water",
      "type2": null,
      "baseStats": {
        "hp": 59,
        "attack": 63,
        "defense": 80,
        "spAttack": 65,
        "spDefense": 80,
        "speed": 58
      },
      "baseEnergy": 90,
      "abilities": ["Torrent", "Rain Dish"],
      "evolution": {
        "method": "level",
        "requirement": 36,
        "result": "blastoise"
      }
    },
    {
      "id": "blastoise",
      "name": "Blastoise",
      "type1": "Water",
      "type2": null,
      "baseStats": {
        "hp": 79,
        "attack": 83,
        "defense": 100,
        "spAttack": 85,
        "spDefense": 105,
        "speed": 78
      },
      "baseEnergy": 110,
      "abilities": ["Torrent", "Rain Dish"]
    }
  ],
  "moves": [
    {
      "id": "thunder_shock",
      "name": "Thunder Shock",
      "type": "Electric",
      "category": "Special",
      "power": 40,
      "energyCost": 15,
      "accuracy": 100,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (attack/defense) * typeEffectiveness * random(0.85, 1.0)"
        },
        {
          "type": "statusChance",
          "status": "paralyzed",
          "chance": 10
        }
      ]
    },
    {
      "id": "thunderbolt",
      "name": "Thunderbolt",
      "type": "Electric",
      "category": "Special",
      "power": 90,
      "energyCost": 35,
      "accuracy": 100,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (spAttack/spDefense) * typeEffectiveness * random(0.85, 1.0)"
        },
        {
          "type": "statusChance",
          "status": "paralyzed",
          "chance": 10
        }
      ]
    },
    {
      "id": "flamethrower",
      "name": "Flamethrower",
      "type": "Fire",
      "category": "Special",
      "power": 90,
      "energyCost": 35,
      "accuracy": 100,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (spAttack/spDefense) * typeEffectiveness * random(0.85, 1.0)"
        },
        {
          "type": "statusChance",
          "status": "burned",
          "chance": 10
        }
      ]
    },
    {
      "id": "water_gun",
      "name": "Water Gun",
      "type": "Water",
      "category": "Special",
      "power": 40,
      "energyCost": 15,
      "accuracy": 100,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (spAttack/spDefense) * typeEffectiveness * random(0.85, 1.0)"
        }
      ]
    },
    {
      "id": "tackle",
      "name": "Tackle",
      "type": "Normal",
      "category": "Physical",
      "power": 35,
      "energyCost": 10,
      "accuracy": 95,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (attack/defense) * typeEffectiveness * random(0.85, 1.0)"
        }
      ]
    },
    {
      "id": "quick_attack",
      "name": "Quick Attack",
      "type": "Normal",
      "category": "Physical",
      "power": 40,
      "energyCost": 12,
      "accuracy": 100,
      "priority": 1,
      "effects": [
        {
          "type": "damage",
          "formula": "power * (attack/defense) * typeEffectiveness * random(0.85, 1.0)"
        }
      ]
    }
  ],
  "statusEffects": [
    {
      "id": "paralyzed",
      "name": "Paralyzed",
      "description": "Pokemon may be unable to move (25% chance)",
      "effects": [
        {
          "type": "speedModifier",
          "value": 0.5
        },
        {
          "type": "moveBlockChance",
          "chance": 25
        }
      ],
      "duration": "permanent",
      "curedBy": ["Paralyze Heal", "Full Heal", "rest"]
    },
    {
      "id": "burned",
      "name": "Burned",
      "description": "Pokemon loses HP each turn and attack is reduced",
      "effects": [
        {
          "type": "endTurnDamage",
          "formula": "maxHP / 16"
        },
        {
          "type": "attackModifier",
          "value": 0.5
        }
      ],
      "duration": "permanent",
      "curedBy": ["Burn Heal", "Full Heal", "rest"]
    },
    {
      "id": "poisoned",
      "name": "Poisoned",
      "description": "Pokemon loses HP each turn",
      "effects": [
        {
          "type": "endTurnDamage",
          "formula": "maxHP / 8"
        }
      ],
      "duration": "permanent",
      "curedBy": ["Antidote", "Full Heal", "rest"]
    },
    {
      "id": "sleeping",
      "name": "Sleeping",
      "description": "Pokemon cannot move until it wakes up",
      "effects": [
        {
          "type": "moveBlock",
          "value": true
        },
        {
          "type": "wakeUpChance",
          "chance": 33
        }
      ],
      "duration": "1-3 turns",
      "curedBy": ["Awakening", "Full Heal", "taking damage"]
    }
  ],
  "abilities": [
    {
      "id": "static",
      "name": "Static",
      "description": "Contact with this Pokemon may cause paralysis",
      "trigger": "onContact",
      "effect": {
        "type": "statusInflict",
        "status": "paralyzed",
        "chance": 30
      }
    },
    {
      "id": "blaze",
      "name": "Blaze",
      "description": "Powers up Fire-type moves when HP is low",
      "trigger": "onAttack",
      "condition": "hp < 33%",
      "effect": {
        "type": "moveTypeBoost",
        "moveType": "Fire",
        "multiplier": 1.5
      }
    },
    {
      "id": "torrent",
      "name": "Torrent",
      "description": "Powers up Water-type moves when HP is low",
      "trigger": "onAttack",
      "condition": "hp < 33%",
      "effect": {
        "type": "moveTypeBoost",
        "moveType": "Water",
        "multiplier": 1.5
      }
    }
  ],
  "experienceSystem": {
    "trainerLevelChart": {
      "1": 0,
      "2": 100,
      "3": 300,
      "4": 600,
      "5": 1000,
      "10": 4500,
      "15": 12000,
      "20": 25000
    },
    "expSources": {
      "wildPokemonCapture": 50,
      "trainerBattleWin": 200,
      "gymLeaderDefeat": 1000,
      "explorationChallenge": 100,
      "questCompletion": 500
    }
  },
  "functionDefinitions": {
    "GameSetup": [
      {
        "id": "select_trainer_class",
        "name": "select_trainer_class",
        "description": "Select a trainer class that determines starting stats and abilities",
        "parameters": [
          {
            "name": "classId",
            "type": "string",
            "description": "ID of the trainer class to select",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.trainerClass == null || character.trainerClass == ''",
          "rulesetData.trainerClasses.hasOwnProperty({{classId}})"
        ],
        "effects": [
          {
            "target": "character.trainerClass",
            "operation": "set",
            "value": "{{classId}}"
          },
          {
            "target": "character.stats",
            "operation": "setFromRuleset",
            "source": "trainerClasses.{{classId}}.baseStats"
          },
          {
            "target": "character.abilities",
            "operation": "addFromRuleset",
            "source": "trainerClasses.{{classId}}.startingAbilities"
          }
        ]
      },
      {
        "id": "choose_starter_pokemon",
        "name": "choose_starter_pokemon",
        "description": "Choose a starter Pokemon from available options",
        "parameters": [
          {
            "name": "speciesId",
            "type": "string",
            "description": "Species ID of the starter Pokemon",
            "required": true
          },
          {
            "name": "nickname",
            "type": "string",
            "description": "Optional nickname for the Pokemon",
            "required": false
          }
        ],
        "ruleValidations": [
          "character.pokemonTeam.length == 0",
          "rulesetData.pokemonSpecies.hasOwnProperty({{speciesId}})"
        ],
        "effects": [
          {
            "target": "gameState.player.pokemonTeam",
            "operation": "addPokemon",
            "value": {
              "speciesId": "{{speciesId}}",
              "nickname": "{{nickname}}",
              "level": 5,
              "experience": 0
            }
          }
        ]
      },
      {
        "id": "set_trainer_name",
        "name": "set_trainer_name",
        "description": "Set the trainer's name and customize appearance",
        "parameters": [
          {
            "name": "trainerName",
            "type": "string",
            "description": "The name for the trainer",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.name == null || character.name == ''",
          "{{trainerName}}.length >= 2 && {{trainerName}}.length <= 20"
        ],
        "effects": [
          {
            "action": "setCharacterProperty",
            "target": "character",
            "property": "name",
            "value": "{{trainerName}}"
          }
        ]
      },
      {
        "id": "select_region",
        "name": "select_region",
        "description": "Select the region where the Pokemon adventure takes place",
        "parameters": [
          {
            "name": "regionId",
            "type": "string",
            "description": "ID of the region to select (e.g. 'kanto', 'johto', 'hoenn')",
            "required": true
          }
        ],
        "ruleValidations": [
          "gameState.region == null || gameState.region == ''",
          "rulesetData.regions.hasOwnProperty({{regionId}})"
        ],
        "effects": [
          {
            "target": "gameState.region",
            "operation": "set",
            "value": "{{regionId}}"
          }
        ]
      },
      {
        "id": "validate_setup_completion",
        "name": "validate_setup_completion",
        "description": "Validate that all required setup steps have been completed before finalizing",
        "parameters": [
          {
            "name": "checkOnly",
            "type": "boolean",
            "description": "Whether to only validate without making changes",
            "required": false
          }
        ],
        "ruleValidations": [
          "character.name != null && character.name != ''",
          "character.trainerClass != null && character.trainerClass != ''",
          "gameState.region != null && gameState.region != ''",
          "character.pokemonTeam.length > 0"
        ],
        "effects": [
          {
            "target": "gameState.setupValidated",
            "operation": "set",
            "value": true
          }
        ]
      }
    ],
    "WorldGeneration": [
      {
        "id": "generate_wild_pokemon",
        "name": "generate_wild_pokemon",
        "description": "Generate wild Pokemon in a location based on habitat",
        "parameters": [
          {
            "name": "locationId",
            "type": "string",
            "description": "Location where Pokemon will be generated",
            "required": true
          },
          {
            "name": "habitat",
            "type": "string",
            "description": "Habitat type (forest, cave, water, etc.)",
            "required": true
          },
          {
            "name": "count",
            "type": "int",
            "description": "Number of Pokemon to generate",
            "required": true
          }
        ],
        "ruleValidations": [
          "{{count}} > 0 && {{count}} <= 10"
        ],
        "effects": [
          {
            "target": "gameState.wildPokemon",
            "operation": "generatePokemon",
            "value": {
              "locationId": "{{locationId}}",
              "habitat": "{{habitat}}",
              "count": "{{count}}"
            }
          }
        ]
      },
      {
        "id": "create_gym",
        "name": "create_gym",
        "description": "Create a gym with a leader and theme",
        "parameters": [
          {
            "name": "gymId",
            "type": "string",
            "description": "Unique identifier for the gym",
            "required": true
          },
          {
            "name": "leaderName",
            "type": "string",
            "description": "Name of the gym leader",
            "required": true
          },
          {
            "name": "type",
            "type": "string",
            "description": "Pokemon type specialty of the gym",
            "required": true
          },
          {
            "name": "level",
            "type": "int",
            "description": "Challenge level of the gym (1-8)",
            "required": true
          }
        ],
        "ruleValidations": [
          "{{level}} >= 1 && {{level}} <= 8",
          "rulesetData.pokemonTypes.includes({{type}})"
        ],
        "effects": [
          {
            "target": "gameState.gyms",
            "operation": "addGym",
            "value": {
              "id": "{{gymId}}",
              "leader": "{{leaderName}}",
              "type": "{{type}}",
              "level": "{{level}}"
            }
          }
        ]
      },
      {
        "id": "generate_route",
        "name": "generate_route",
        "description": "Generate a route connecting different locations with wild Pokemon encounters",
        "parameters": [
          {
            "name": "routeId",
            "type": "string",
            "description": "Unique identifier for the route",
            "required": true
          },
          {
            "name": "startLocation",
            "type": "string",
            "description": "Starting location of the route",
            "required": true
          },
          {
            "name": "endLocation",
            "type": "string",
            "description": "Ending location of the route",
            "required": true
          }
        ],
        "ruleValidations": [
          "world.routes[{{routeId}}] == null",
          "world.locations[{{startLocation}}] != null",
          "world.locations[{{endLocation}}] != null"
        ],
        "effects": [
          {
            "action": "addToGameState",
            "target": "world.routes",
            "property": "{{routeId}}",
            "value": {
              "id": "{{routeId}}",
              "start": "{{startLocation}}",
              "end": "{{endLocation}}",
              "encounters": []
            }
          }
        ]
      },
      {
        "id": "create_trainer",
        "name": "create_trainer",
        "description": "Create a Pokemon trainer NPC with specific Pokemon and abilities",
        "parameters": [
          {
            "name": "trainerId",
            "type": "string",
            "description": "Unique identifier for the trainer",
            "required": true
          },
          {
            "name": "trainerName",
            "type": "string",
            "description": "Name of the trainer",
            "required": true
          },
          {
            "name": "trainerClass",
            "type": "string",
            "description": "Type of trainer (gym_leader, elite_four, champion, rival, etc.)",
            "required": true
          },
          {
            "name": "level",
            "type": "int",
            "description": "Trainer's experience level (1-100)",
            "required": true
          },
          {
            "name": "locationId",
            "type": "string",
            "description": "Location where trainer will be placed",
            "required": false
          }
        ],
        "ruleValidations": [
          "{{level}} >= 1 && {{level}} <= 100",
          "rulesetData.trainerClasses.hasOwnProperty({{trainerClass}})"
        ],
        "effects": [
          {
            "target": "gameState.trainers",
            "operation": "addTrainer",
            "value": {
              "id": "{{trainerId}}",
              "name": "{{trainerName}}",
              "class": "{{trainerClass}}",
              "level": "{{level}}",
              "location": "{{locationId}}",
              "pokemon": [],
              "items": []
            }
          }
        ]
      },
      {
        "id": "create_pokemon",
        "name": "create_pokemon",
        "description": "Create a specific Pokemon instance with stats and moves",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "Unique identifier for this Pokemon instance",
            "required": true
          },
          {
            "name": "species",
            "type": "string",
            "description": "Pokemon species name",
            "required": true
          },
          {
            "name": "level",
            "type": "int",
            "description": "Pokemon level (1-100)",
            "required": true
          },
          {
            "name": "nature",
            "type": "string",
            "description": "Pokemon nature affecting stats",
            "required": false
          },
          {
            "name": "locationId",
            "type": "string",
            "description": "Location where Pokemon will be placed",
            "required": false
          }
        ],
        "ruleValidations": [
          "{{level}} >= 1 && {{level}} <= 100",
          "rulesetData.species.hasOwnProperty({{species}})"
        ],
        "effects": [
          {
            "target": "gameState.pokemon",
            "operation": "addPokemon",
            "value": {
              "id": "{{pokemonId}}",
              "species": "{{species}}",
              "level": "{{level}}",
              "nature": "{{nature}}",
              "location": "{{locationId}}",
              "moves": [],
              "stats": {}
            }
          }
        ]
      },
      {
        "id": "create_location",
        "name": "create_location",
        "description": "Create a new location in the Pokemon world",
        "parameters": [
          {
            "name": "locationId",
            "type": "string",
            "description": "Unique identifier for the location",
            "required": true
          },
          {
            "name": "locationName",
            "type": "string",
            "description": "Display name of the location",
            "required": true
          },
          {
            "name": "locationType",
            "type": "string",
            "description": "Type of location (city, route, cave, forest, gym, etc.)",
            "required": true
          },
          {
            "name": "region",
            "type": "string",
            "description": "Which region this location belongs to",
            "required": true
          },
          {
            "name": "description",
            "type": "string",
            "description": "Detailed description of the location",
            "required": true
          }
        ],
        "ruleValidations": [
          "gameState.locations[{{locationId}}] == null",
          "rulesetData.regions.hasOwnProperty({{region}})"
        ],
        "effects": [
          {
            "target": "gameState.locations",
            "operation": "addLocation",
            "value": {
              "id": "{{locationId}}",
              "name": "{{locationName}}",
              "type": "{{locationType}}",
              "region": "{{region}}",
              "description": "{{description}}",
              "connectedLocations": [],
              "trainers": [],
              "wildPokemon": [],
              "items": []
            }
          }
        ]
      },
      {
        "id": "assign_pokemon_to_trainer",
        "name": "assign_pokemon_to_trainer",
        "description": "Assign a Pokemon to a trainer's team",
        "parameters": [
          {
            "name": "trainerId",
            "type": "string",
            "description": "ID of the trainer to receive the Pokemon",
            "required": true
          },
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of the Pokemon to assign",
            "required": true
          }
        ],
        "ruleValidations": [
          "gameState.trainers[{{trainerId}}] != null",
          "gameState.pokemon[{{pokemonId}}] != null",
          "gameState.trainers[{{trainerId}}].pokemon.length < 6"
        ],
        "effects": [
          {
            "target": "gameState.trainers[{{trainerId}}].pokemon",
            "operation": "addToArray",
            "value": "{{pokemonId}}"
          },
          {
            "target": "gameState.pokemon[{{pokemonId}}].owner",
            "operation": "set",
            "value": "{{trainerId}}"
          }
        ]
      }
    ],
    "Exploration": [
      {
        "id": "attempt_capture",
        "name": "attempt_capture",
        "description": "Attempt to capture a wild Pokemon using a Pokeball",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of the wild Pokemon to capture",
            "required": true
          },
          {
            "name": "pokeballType",
            "type": "string",
            "description": "Type of Pokeball to use",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.inventory[{{pokeballType}}] > 0",
          "character.pokemonTeam.length < 6",
          "gameState.wildPokemon.hasOwnProperty({{pokemonId}})"
        ],
        "effects": [
          {
            "target": "character.inventory[{{pokeballType}}]",
            "operation": "subtract",
            "value": 1
          },
          {
            "target": "gameState.player.pokemonTeam",
            "operation": "addPokemon",
            "value": "{{pokemonId}}"
          },
          {
            "target": "gameState.wildPokemon",
            "operation": "removePokemon",
            "value": "{{pokemonId}}"
          },
          {
            "target": "character.experience",
            "operation": "add",
            "value": 50
          }
        ]
      },
      {
        "id": "use_item",
        "name": "use_item",
        "description": "Use an item from inventory",
        "parameters": [
          {
            "name": "itemId",
            "type": "string",
            "description": "ID of the item to use",
            "required": true
          },
          {
            "name": "targetId",
            "type": "string",
            "description": "Target Pokemon ID (if applicable)",
            "required": false
          }
        ],
        "ruleValidations": [
          "character.inventory[{{itemId}}] > 0"
        ],
        "effects": [
          {
            "target": "character.inventory[{{itemId}}]",
            "operation": "subtract",
            "value": 1
          },
          {
            "target": "gameState.player.pokemonTeam",
            "operation": "applyItem",
            "value": {
              "itemId": "{{itemId}}",
              "targetId": "{{targetId}}"
            }
          }
        ]
      },
      {
        "id": "rest_at_pokemon_center",
        "name": "rest_at_pokemon_center",
        "description": "Rest at a Pokemon Center to heal Pokemon and restore energy",
        "parameters": [],
        "ruleValidations": [
          "gameState.currentLocation.hasPokemonCenter == true"
        ],
        "effects": [
          {
            "target": "gameState.player.pokemonTeam",
            "operation": "fullHeal",
            "value": "all"
          },
          {
            "target": "character.energy",
            "operation": "restore",
            "value": "full"
          }
        ]
      },
      {
        "id": "search_area",
        "name": "search_area",
        "description": "Search the current area for hidden items or secrets",
        "parameters": [],
        "ruleValidations": [
          "character.location != null",
          "character.energy >= 10"
        ],
        "effects": [
          {
            "action": "consumeResource",
            "target": "character.energy",
            "value": 10
          },
          {
            "action": "attemptItemFind",
            "target": "character.inventory",
            "chance": 0.3
          }
        ]
      }
    ],
    "Combat": [
      {
        "id": "use_move",
        "name": "use_move",
        "description": "Have active Pokemon use a move in battle",
        "parameters": [
          {
            "name": "moveId",
            "type": "string",
            "description": "ID of the move to use",
            "required": true
          },
          {
            "name": "targetId",
            "type": "string",
            "description": "ID of the target Pokemon",
            "required": false
          }
        ],
        "ruleValidations": [
          "battleState.activePokemon.moves.includes({{moveId}})",
          "battleState.activePokemon.energy >= moves[{{moveId}}].energyCost",
          "battleState.activePokemon.status != 'fainted'"
        ],
        "effects": [
          {
            "target": "battleState.activePokemon.energy",
            "operation": "subtract",
            "value": "moves[{{moveId}}].energyCost"
          },
          {
            "target": "battleState.targets",
            "operation": "applyMove",
            "value": {
              "moveId": "{{moveId}}",
              "user": "battleState.activePokemon",
              "target": "{{targetId}}"
            }
          }
        ]
      },
      {
        "id": "switch_pokemon",
        "name": "switch_pokemon",
        "description": "Switch to a different Pokemon",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of Pokemon to switch to",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.pokemonTeam.find(p => p.id == {{pokemonId}}).status != 'fainted'",
          "battleState.activePokemon.id != {{pokemonId}}"
        ],
        "effects": [
          {
            "target": "battleState.activePokemon",
            "operation": "switch",
            "value": "{{pokemonId}}"
          }
        ]
      },
      {
        "id": "use_item_in_battle",
        "name": "use_item_in_battle",
        "description": "Use an item during battle",
        "parameters": [
          {
            "name": "itemId",
            "type": "string",
            "description": "ID of the item to use",
            "required": true
          },
          {
            "name": "targetId",
            "type": "string",
            "description": "Target Pokemon ID",
            "required": false
          }
        ],
        "ruleValidations": [
          "character.inventory[{{itemId}}] > 0",
          "items[{{itemId}}].usableInBattle == true"
        ],
        "effects": [
          {
            "target": "character.inventory[{{itemId}}]",
            "operation": "subtract",
            "value": 1
          },
          {
            "target": "battleState.pokemon",
            "operation": "applyItem",
            "value": {
              "itemId": "{{itemId}}",
              "targetId": "{{targetId}}"
            }
          }
        ]
      },
      {
        "id": "flee_battle",
        "name": "flee_battle",
        "description": "Attempt to flee from a wild Pokemon battle",
        "parameters": [],
        "ruleValidations": [
          "gameState.inBattle == true",
          "gameState.battleType == 'wild'"
        ],
        "effects": [
          {
            "action": "calculateFleeChance",
            "target": "battleState",
            "successAction": "endBattle",
            "failureAction": "continueForced"
          }
        ]
      }
    ],
    "LevelUp": [
      {
        "id": "level_up_pokemon",
        "name": "level_up_pokemon",
        "description": "Level up a Pokemon and potentially learn new moves",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of the Pokemon to level up",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.pokemonTeam.find(p => p.id == {{pokemonId}}).experience >= getExpForNextLevel(pokemon.level)"
        ],
        "effects": [
          {
            "target": "character.pokemonTeam[{{pokemonId}}].level",
            "operation": "add",
            "value": 1
          },
          {
            "target": "character.pokemonTeam[{{pokemonId}}].stats",
            "operation": "recalculate",
            "value": "levelUp"
          },
          {
            "target": "character.pokemonTeam[{{pokemonId}}].moves",
            "operation": "checkNewMoves",
            "value": "currentLevel"
          }
        ]
      },
      {
        "id": "learn_move",
        "name": "learn_move",
        "description": "Have a Pokemon learn a new move",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of the Pokemon learning the move",
            "required": true
          },
          {
            "name": "moveId",
            "type": "string",
            "description": "ID of the move to learn",
            "required": true
          },
          {
            "name": "forgetMoveId",
            "type": "string",
            "description": "ID of move to forget if Pokemon knows 4 moves",
            "required": false
          }
        ],
        "ruleValidations": [
          "rulesetData.moves.hasOwnProperty({{moveId}})",
          "character.pokemonTeam.find(p => p.id == {{pokemonId}}).moves.length < 4 || {{forgetMoveId}} != null"
        ],
        "effects": [
          {
            "target": "character.pokemonTeam[{{pokemonId}}].moves",
            "operation": "learnMove",
            "value": {
              "newMove": "{{moveId}}",
              "forgetMove": "{{forgetMoveId}}"
            }
          }
        ]
      },
      {
        "id": "evolve_pokemon",
        "name": "evolve_pokemon",
        "description": "Evolve a Pokemon if evolution conditions are met",
        "parameters": [
          {
            "name": "pokemonId",
            "type": "string",
            "description": "ID of the Pokemon to evolve",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.pokemonTeam.find(p => p.id == {{pokemonId}}).canEvolve == true"
        ],
        "effects": [
          {
            "target": "character.pokemonTeam[{{pokemonId}}]",
            "operation": "evolve",
            "value": "nextEvolution"
          }
        ]
      },
      {
        "id": "upgrade_trainer_skills",
        "name": "upgrade_trainer_skills",
        "description": "Spend skill points to upgrade trainer abilities",
        "parameters": [
          {
            "name": "skill",
            "type": "string",
            "description": "The skill to upgrade",
            "required": true
          }
        ],
        "ruleValidations": [
          "character.skillPoints > 0",
          "character.skills[{{skill}}] != null",
          "character.skills[{{skill}}] < 5"
        ],
        "effects": [
          {
            "action": "upgradeSkill",
            "target": "character.skills",
            "property": "{{skill}}",
            "cost": 1
          }
        ]
      }
    ]
  },
  "promptTemplates": {
    "GameSetup": {
      "systemPrompt": "You are a creative storyteller helping craft a Pokemon trainer's origin story. Create compelling adventure hooks, vivid world details, and meaningful character choices. Never limit yourself to existing data - if something doesn't exist, create it as part of the world's expanding canon. Your goal is to make the player excited about their upcoming journey through imaginative world-building and character development.",
      "phaseObjective": "Create an engaging trainer origin story with class selection, starter Pokemon choice, and compelling adventure setup",
      "availableFunctions": ["select_trainer_class", "choose_starter_pokemon"],
      "contextElements": [
        "Adventure themes and storytelling opportunities",
        "Creative trainer class options and their narrative roles",
        "Unique starter Pokemon with personality and potential",
        "Rich world background with mystery and adventure hooks"
      ]
    },
    "WorldGeneration": {
      "systemPrompt": "You are a master world-builder crafting an expansive Pokemon universe. Lead with creative imagination to build diverse, interconnected locations filled with unique Pokemon, memorable NPCs, and compelling storylines. Don't be constrained by existing data - create new Pokemon species, innovative gym concepts, and original storylines that enhance the world. Your goal is to build a living, breathing world that responds dynamically to player choices.",
      "phaseObjective": "Build a rich, interconnected adventure world with creative locations, unique Pokemon encounters, and engaging storylines",
      "availableFunctions": ["generate_wild_pokemon", "create_gym", "establish_location"],
      "contextElements": [
        "Creative regional concepts and environmental storytelling",
        "Unique Pokemon species and behavioral patterns",
        "Innovative gym challenges and leader personalities",
        "Interconnected story themes and mysterious plot threads"
      ]
    },
    "Exploration": {
      "systemPrompt": "You are the adventure orchestrator bringing the Pokemon world to life through dynamic storytelling. Create spontaneous encounters, memorable NPCs, and meaningful discoveries that respond to player choices. If a location or Pokemon doesn't exist in your database, invent it on the spot and make it part of the world's growing canon. Focus on emotional connections, surprising discoveries, and adventures that make every exploration feel fresh and exciting.",
      "phaseObjective": "Create dynamic exploration experiences with meaningful discoveries, emotional encounters, and responsive world-building",
      "availableFunctions": ["attempt_capture", "use_item", "rest_at_pokemon_center", "challenge_trainer"],
      "contextElements": [
        "Dynamic location details and hidden discoveries",
        "Unique wild Pokemon with individual personalities",
        "Evolving trainer relationships and team bonds",
        "Creative resource opportunities and discoveries",
        "Emergent story developments and player-driven narratives"
      ]
    },
    "Combat": {
      "systemPrompt": "You are directing epic Pokemon battles like anime episodes, where bonds between trainers and Pokemon matter more than raw statistics. Create dramatic combat sequences where trust, strategy, and emotional connections lead to victory. If a move or battle mechanic doesn't exist, invent creative alternatives that enhance the story. Focus on the emotional stakes and relationship dynamics that make each battle meaningful.",
      "phaseObjective": "Create cinematic Pokemon battles that emphasize bonds, strategy, and dramatic storytelling over rigid rule enforcement",
      "availableFunctions": ["use_move", "switch_pokemon", "use_item_in_battle", "attempt_escape"],
      "contextElements": [
        "Trainer-Pokemon bonds and emotional connections",
        "Creative move combinations and battle strategies",
        "Dynamic type interactions and environmental factors",
        "Evolving battle conditions and dramatic moments",
        "Character growth opportunities through combat challenges"
      ]
    },
    "LevelUp": {
      "systemPrompt": "You are orchestrating breakthrough moments where Pokemon and trainers grow stronger through their shared bonds. Create emotional evolution ceremonies, meaningful ability discoveries, and celebration moments that reinforce relationships. If standard moves or evolutions don't fit the story, create unique alternatives that reflect the individual Pokemon's personality and journey. Focus on the emotional significance of growth and the deepening bonds between partners.",
      "phaseObjective": "Create meaningful growth experiences that celebrate bonds and unlock new potential through relationship development",
      "availableFunctions": ["level_up_pokemon", "learn_move", "evolve_pokemon", "level_up_trainer"],
      "contextElements": [
        "Emotional growth moments and breakthrough opportunities",
        "Unique move discoveries that reflect Pokemon personalities",
        "Personal evolution journeys and individual choices",
        "Trainer development through mentorship and experience",
        "Relationship milestones and bond strengthening celebrations"
      ]
    }
  },
  "regions": {
    "kanto": {
      "id": "kanto",
      "name": "Kanto",
      "description": "The original Pokemon region, home to Professor Oak and the Pokemon League Elite Four",
      "startingTown": "Pallet Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["articuno", "zapdos", "moltres", "mewtwo", "mew"],
      "starterPokemon": ["bulbasaur", "charmander", "squirtle"],
      "professor": "Professor Oak",
      "climate": "Temperate",
      "features": ["Viridian Forest", "Mt. Moon", "Safari Zone", "Pokemon Tower", "Indigo Plateau"]
    },
    "johto": {
      "id": "johto",
      "name": "Johto",
      "description": "A neighboring region to Kanto, known for its traditional culture and legendary Pokemon",
      "startingTown": "New Bark Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["raikou", "entei", "suicune", "lugia", "ho-oh", "celebi"],
      "starterPokemon": ["chikorita", "cyndaquil", "totodile"],
      "professor": "Professor Elm",
      "climate": "Temperate",
      "features": ["Ilex Forest", "Bell Tower", "Whirl Islands", "Mt. Silver", "Lake of Rage"]
    },
    "hoenn": {
      "id": "hoenn",
      "name": "Hoenn",
      "description": "A tropical region with diverse environments and abundant water routes",
      "startingTown": "Littleroot Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["kyogre", "groudon", "rayquaza", "latios", "latias", "jirachi", "deoxys"],
      "starterPokemon": ["treecko", "torchic", "mudkip"],
      "professor": "Professor Birch",
      "climate": "Tropical",
      "features": ["Petalburg Woods", "Mt. Chimney", "Sky Pillar", "Meteor Falls", "Ever Grande City"]
    },
    "sinnoh": {
      "id": "sinnoh",
      "name": "Sinnoh",
      "description": "A northern region with snowy mountains and ancient mythology",
      "startingTown": "Twinleaf Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["dialga", "palkia", "giratina", "azelf", "mesprit", "uxie", "darkrai", "cresselia", "phione", "manaphy", "shaymin", "arceus"],
      "starterPokemon": ["turtwig", "chimchar", "piplup"],
      "professor": "Professor Rowan",
      "climate": "Continental",
      "features": ["Mt. Coronet", "Distortion World", "Spear Pillar", "Stark Mountain", "Pokemon League"]
    },
    "unova": {
      "id": "unova",
      "name": "Unova",
      "description": "A diverse region with modern cities and unique Pokemon not found elsewhere",
      "startingTown": "Nuvema Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["reshiram", "zekrom", "kyurem", "cobalion", "terrakion", "virizion", "tornadus", "thundurus", "landorus", "victini", "keldeo", "meloetta", "genesect"],
      "starterPokemon": ["snivy", "tepig", "oshawott"],
      "professor": "Professor Juniper",
      "climate": "Varied",
      "features": ["Pinwheel Forest", "Desert Resort", "Chargestone Cave", "Giant Chasm", "Pokemon League"]
    },
    "kalos": {
      "id": "kalos",
      "name": "Kalos",
      "description": "An elegant region inspired by French culture, where Mega Evolution was discovered",
      "startingTown": "Vaniville Town",
      "gymLeaders": 8,
      "legendaryPokemon": ["xerneas", "yveltal", "zygarde", "diancie", "hoopa", "volcanion"],
      "starterPokemon": ["chespin", "fennekin", "froakie"],
      "professor": "Professor Sycamore",
      "climate": "Mediterranean",
      "features": ["Santalune Forest", "Glittering Cave", "Pokemon Village", "Terminus Cave", "Pokemon League"]
    }
  },
  "items": [
    {
      "id": "pokeball",
      "name": "Poke Ball",
      "description": "A standard ball for catching Pokemon",
      "category": "pokeball",
      "catchRate": 1.0,
      "usableInBattle": true
    },
    {
      "id": "great_ball",
      "name": "Great Ball",
      "description": "A ball with higher catch rate than a Poke Ball",
      "category": "pokeball",
      "catchRate": 1.5,
      "usableInBattle": true
    },
    {
      "id": "ultra_ball",
      "name": "Ultra Ball",
      "description": "A ball with very high catch rate",
      "category": "pokeball",
      "catchRate": 2.0,
      "usableInBattle": true
    },
    {
      "id": "potion",
      "name": "Potion",
      "description": "Restores 20 HP to a Pokemon",
      "category": "healing",
      "effect": {
        "type": "heal",
        "amount": 20
      },
      "usableInBattle": true
    },
    {
      "id": "super_potion",
      "name": "Super Potion",
      "description": "Restores 50 HP to a Pokemon",
      "category": "healing",
      "effect": {
        "type": "heal",
        "amount": 50
      },
      "usableInBattle": true
    },
    {
      "id": "full_heal",
      "name": "Full Heal",
      "description": "Cures all status conditions",
      "category": "medicine",
      "effect": {
        "type": "cureStatus",
        "conditions": "all"
      },
      "usableInBattle": true
    }
  ],
  "validationRules": {
    "characterCreation": {
      "trainerClassSelected": "character.trainerClass != null && character.trainerClass != ''",
      "starterPokemonSelected": "character.party != null && character.party.length > 0",
      "validStarterPokemon": "character.party[0].species in ['bulbasaur', 'charmander', 'squirtle']",
      "validLevel": "character.level >= 1 && character.level <= 100"
    },
    "pokemonManagement": {
      "validPartySize": "character.party.length <= 6",
      "pokemonHaveValidStats": "all(character.party, pokemon => pokemon.hp > 0 && pokemon.level >= 1 && pokemon.level <= 100)",
      "movesAreValid": "all(character.party, pokemon => pokemon.moves.length <= 4 && all(pokemon.moves, move => move in getPokemonMovepool(pokemon.species)))",
      "typesAreValid": "all(character.party, pokemon => pokemon.types.length <= 2 && all(pokemon.types, type => type in validPokemonTypes))"
    },
    "battleActions": {
      "validMoveUse": "move in activePokemon.moves && activePokemon.pp[move] > 0",
      "validPokemonSwitch": "targetPokemon in character.party && targetPokemon.hp > 0 && targetPokemon != activePokemon",
      "validItemUse": "item in character.bag && item.usableInBattle == true",
      "targetIsValid": "target.id in gameState.battle.participants || target.type == 'field'"
    }
  },
  "settingRequirements": {
    "canonCompliance": "Stay faithful to canonical Pokemon lore, species, moves, and established locations unless the player explicitly requests creative liberties or original content.",
    "worldConsistency": "Maintain consistency with previously established world elements, character relationships, and ongoing storylines throughout the adventure.",
    "realismBounds": "Keep Pokemon abilities and world mechanics grounded within the established Pokemon universe logic and physics.",
    "playerAgency": "Respect player choices and avoid railroading - allow multiple valid approaches to challenges and respect character build decisions.",
    "loreAccuracy": "Use accurate Pokemon stats, type effectiveness, move descriptions, and established behavioral patterns for all canonical Pokemon."
  },
  "storytellingDirective": {
    "tone": "High action anime adventure",
    "style": "Energetic and optimistic with dramatic moments, friendship themes, and personal growth through challenges",
    "pacing": "Dynamic pacing with exciting battles, meaningful character interactions, and moments of discovery and wonder",
    "themes": "Friendship, perseverance, growth through adversity, respect for Pokemon, and the joy of adventure and discovery",
    "atmosphere": "Vibrant and colorful world full of possibilities, where determination and bonds with Pokemon can overcome any obstacle"
  }
}